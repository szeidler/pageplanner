<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\Component\Serialization\Json;
use Drupal\node\NodeTypeInterface;

/**
 * Implements hook_theme().
 */
function pageplanner_theme($existing, $type, $theme, $path) {
  return [
    'choose_destination' => [
      'variables' => ['title' => NULL, 'destinations' => NULL],
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function pageplanner_form_node_type_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\node\NodeTypeInterface $type */
  $type = $form_state->getFormObject()->getEntity();

  $form['pageplanner'] = [
    '#type' => 'details',
    '#title' => t('Pageplanner'),
    '#weight' => 40,
    '#group' => 'additional_settings',
  ];

  // Field mapping configuration.
  $form['pageplanner']['field_mapping'] = [
    '#type' => 'fieldset',
    '#title' => t('Field mapping'),
    '#tree' => TRUE,
    '#attributes' => ['id' => 'field-mapping-wrapper'],
    'description' => [
      '#type' => 'html_tag',
      '#tag' => 'p',
      '#value' => t('Map the Pageplanner properties with the fields of this bundle.'),
    ],
    '#weight' => -50,
  ];

  /** @var \Drupal\pageplanner\PageplannerManager $pageplanner_manager */
  $pageplanner_manager = Drupal::service('pageplanner.manager');

  $field_map = $type->getThirdPartySetting('pageplanner', 'field_map');
  foreach ($pageplanner_manager->providedFields() as $field_name => $field_label) {
    $form['pageplanner']['field_mapping'][$field_name] = [
      '#type' => 'select',
      '#title' => $field_label,
      '#options' => $pageplanner_manager->getFieldOptionList('node', $type->id()),
      '#default_value' => isset($field_map[$field_name]) ? $field_map[$field_name] : '_none',
    ];
  }

  $form['#entity_builders'][] = 'pageplanner_form_node_type_form_builder';

}

/**
 * Entity builder for the node type form with pageplanner options.
 *
 * @see pageplanner_form_node_type_form_alter()
 */
function pageplanner_form_node_type_form_builder($entity_type, NodeTypeInterface $type, &$form, FormStateInterface $form_state) {
  $type->setThirdPartySetting('pageplanner', 'field_map', array_filter(
    $form_state->getValue('field_mapping', []),
    function ($item) {
      return $item != '_none';
    }
  ));
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function pageplanner_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $entity = $form_state->getFormObject()->getEntity();
  // Only existing content can be exported.
  if (!$entity->isNew()) {
    $url = Url::fromRoute('pageplanner.pageplanner_export.choose_destination', [
      'entity_type' => $entity->getEntityTypeId(),
      'entity' => $entity->id(),
    ]);
    $url->setOptions([
      'attributes' => [
        'class' => ['use-ajax', 'button'],
        'data-dialog-type' => 'modal',
        'data-dialog-options' => Json::encode(['width' => '80%']),
      ],
    ]);

    $form['actions']['pageplanner_export'] = [
      '#type' => 'link',
      '#title' => t('Export to Pageplanner'),
      '#url' => $url,
      '#weight' => 25,
      '#attributes' => [
        'class' => [
          'use-ajax',
          'button',
        ],
      ],
    ];
    $form['#attached']['library'][] = 'core/drupal.dialog.ajax';
  }
}
